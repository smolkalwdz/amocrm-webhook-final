// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ "—Å–µ–≥–æ–¥–Ω—è"
module.exports = async (req, res) => {
  const fetch = (await import('node-fetch')).default;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM
  const AMO_SUBDOMAIN = 'dungeonbron';
  const AMO_ACCESS_TOKEN = process.env.AMO_ACCESS_TOKEN;

  // –í–∫–ª—é—á–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'GET') {
    res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω' });
    return;
  }

  try {
    const { branch } = req.query;
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å '—Å–µ–≥–æ–¥–Ω—è' –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞: ${branch}`);

    if (!AMO_ACCESS_TOKEN) {
      return res.status(500).json({ error: 'AmoCRM —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º pipeline_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª–∏–∞–ª–∞
    let pipelineId;
    if (branch === '–ü–æ–ª–µ–≤–∞—è') {
      pipelineId = '5998579'; // –ü–æ–ª–µ–≤–∞—è 72
    } else if (branch === '–ú–°–ö') {
      pipelineId = '5096620'; // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à. 43
    } else {
      return res.status(400).json({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–æ–Ω–∫–µ –∏ –µ—ë —Å—Ç–∞—Ç—É—Å–∞—Ö
    const pipelineUrl = `https://${AMO_SUBDOMAIN}.amocrm.ru/api/v4/leads/pipelines/${pipelineId}`;
    console.log(`üåê –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ—Ä–æ–Ω–∫–µ: ${pipelineUrl}`);

    const pipelineResponse = await fetch(pipelineUrl, {
      headers: {
        'Authorization': `Bearer ${AMO_ACCESS_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!pipelineResponse.ok) {
      const errorText = await pipelineResponse.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ AmoCRM API: ${pipelineResponse.status} - ${errorText}`);
      throw new Error(`–û—à–∏–±–∫–∞ AmoCRM API: ${pipelineResponse.status} - ${errorText}`);
    }

    const pipelineData = await pipelineResponse.json();
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–æ—Ä–æ–Ω–∫–µ:`, JSON.stringify(pipelineData, null, 2));

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏
    const leadsUrl = `https://${AMO_SUBDOMAIN}.amocrm.ru/api/v4/leads?pipeline_id=${pipelineId}&limit=250`;
    console.log(`üåê –ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫: ${leadsUrl}`);

    const leadsResponse = await fetch(leadsUrl, {
      headers: {
        'Authorization': `Bearer ${AMO_ACCESS_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!leadsResponse.ok) {
      const errorText = await leadsResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ AmoCRM API: ${leadsResponse.status} - ${errorText}`);
    }

    const leadsData = await leadsResponse.json();
    const leads = leadsData._embedded?.leads || [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
    const statusCounts = {};
    leads.forEach(lead => {
      const statusId = lead.status_id.toString();
      if (!statusCounts[statusId]) {
        statusCounts[statusId] = 0;
      }
      statusCounts[statusId]++;
    });

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏
    const statuses = pipelineData._embedded?.statuses || [];
    const statusNames = {};
    statuses.forEach(status => {
      statusNames[status.id] = status.name;
    });

    // –ò—â–µ–º —Å—Ç–∞—Ç—É—Å "—Å–µ–≥–æ–¥–Ω—è" –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    const todayStatuses = statuses.filter(s => 
      s.name.toLowerCase().includes('—Å–µ–≥–æ–¥–Ω—è') || 
      s.name.toLowerCase().includes('today') ||
      s.name.toLowerCase().includes('—Å–µ–π—á–∞—Å') ||
      s.name.toLowerCase().includes('now')
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å ID 45762658
    const specificStatus = statuses.find(s => s.id.toString() === '45762658');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–¥–µ–ª–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "—Å–µ–≥–æ–¥–Ω—è"
    const todayLeads = leads.filter(lead => {
      const statusName = statusNames[lead.status_id] || '';
      return statusName.toLowerCase().includes('—Å–µ–≥–æ–¥–Ω—è') || 
             statusName.toLowerCase().includes('today') ||
             lead.status_id.toString() === '45762658';
    });

    const result = {
      success: true,
      pipeline: {
        id: pipelineData.id,
        name: pipelineData.name
      },
      statuses: statuses.map(status => ({
        id: status.id,
        name: status.name,
        color: status.color,
        sort: status.sort,
        isToday: status.name.toLowerCase().includes('—Å–µ–≥–æ–¥–Ω—è') || 
                status.name.toLowerCase().includes('today')
      })),
      todayStatuses: todayStatuses.map(s => ({
        id: s.id,
        name: s.name,
        color: s.color
      })),
      specificStatus45762658: specificStatus ? {
        id: specificStatus.id,
        name: specificStatus.name,
        color: specificStatus.color
      } : null,
      leadsAnalysis: {
        totalLeads: leads.length,
        statusCounts: Object.keys(statusCounts).map(statusId => ({
          statusId: statusId,
          statusName: statusNames[statusId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
          count: statusCounts[statusId],
          isToday: statusNames[statusId]?.toLowerCase().includes('—Å–µ–≥–æ–¥–Ω—è') || 
                  statusNames[statusId]?.toLowerCase().includes('today')
        })),
        todayLeads: todayLeads.map(lead => ({
          id: lead.id,
          name: lead.name,
          status_id: lead.status_id,
          status_name: statusNames[lead.status_id] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
        }))
      },
      recommendations: [],
      timestamp: new Date().toISOString(),
      platform: 'Vercel'
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (todayLeads.length === 0) {
      result.recommendations.push('‚ö†Ô∏è –°–¥–µ–ª–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "—Å–µ–≥–æ–¥–Ω—è" –ù–ï –ù–ê–ô–î–ï–ù–´!');
      result.recommendations.push('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      result.recommendations.push('- –°–¥–µ–ª–∫–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã');
      result.recommendations.push('- –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞');
      result.recommendations.push('- –°–¥–µ–ª–∫–∏ –≤ –¥—Ä—É–≥–æ–º —Å—Ç–∞—Ç—É—Å–µ');
      
      if (specificStatus) {
        result.recommendations.push(`- –°—Ç–∞—Ç—É—Å ID 45762658 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: "${specificStatus.name}"`);
        result.recommendations.push(`- –ù–æ –≤ –Ω–µ–º –Ω–µ—Ç —Å–¥–µ–ª–æ–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã)`);
      } else {
        result.recommendations.push('- –°—Ç–∞—Ç—É—Å ID 45762658 –ù–ï –ù–ê–ô–î–ï–ù –≤ –≤–æ—Ä–æ–Ω–∫–µ');
        result.recommendations.push('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID —Å—Ç–∞—Ç—É—Å–∞');
      }
    } else {
      result.recommendations.push(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${todayLeads.length} —Å–¥–µ–ª–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ "—Å–µ–≥–æ–¥–Ω—è"`);
    }

    res.status(200).json(result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ "—Å–µ–≥–æ–¥–Ω—è":', error.message);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString(),
      platform: 'Vercel'
    });
  }
}; 