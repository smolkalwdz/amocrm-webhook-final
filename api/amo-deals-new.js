// Vercel Serverless Function –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –∏–∑ AmoCRM
module.exports = async (req, res) => {
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç node-fetch
  const fetch = (await import('node-fetch')).default;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM
  const AMO_SUBDOMAIN = 'dungeonbron';
  const AMO_ACCESS_TOKEN = process.env.AMO_ACCESS_TOKEN;

  // –í–∫–ª—é—á–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'GET') {
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }

  try {
    const { branch, status } = req.query; // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª–∏–∞–ª –∏ —Å—Ç–∞—Ç—É—Å –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    console.log(`üîç –ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞: ${branch}, —Å—Ç–∞—Ç—É—Å: ${status || '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}`);
    console.log(`üîç –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:`, req.query);
    console.log(`üîç User-Agent:`, req.headers['user-agent']);
    console.log(`üîç Origin:`, req.headers['origin']);

    if (!AMO_ACCESS_TOKEN) {
      console.error('‚ùå AMO_ACCESS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return res.status(500).json({ 
        error: 'AmoCRM —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        deals: [] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      });
    }

    console.log(`‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: ${AMO_ACCESS_TOKEN.substring(0, 20)}...`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º pipeline_id –∏ status_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª–∏–∞–ª–∞
    let pipelineId, statusId;
    if (branch === '–ü–æ–ª–µ–≤–∞—è') {
      pipelineId = '5998579'; // –ü–æ–ª–µ–≤–∞—è 72
      statusId = '52167655'; // –°–µ–≥–æ–¥–Ω—è
    } else if (branch === '–ú–°–ö') {
      pipelineId = '5096620'; // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à. 43
      
      // –ü–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä
      if (status) {
        statusId = status;
        console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π status_id: ${statusId}`);
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å "—Å–µ–≥–æ–¥–Ω—è" –¥–ª—è –ú–°–ö
        statusId = '45762658'; // –°–µ–≥–æ–¥–Ω—è
        console.log(`üìù –î–ª—è –ú–°–ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–¥–µ–ª–∫–∏ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ "—Å–µ–≥–æ–¥–Ω—è" (45762658)`);
      }
    }
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º pipeline_id: ${pipelineId} –∏ status_id: ${statusId} –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ${branch}`);

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–¥–µ–ª–∫–∏ –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –≤ URL)
    const apiUrl = `https://${AMO_SUBDOMAIN}.amocrm.ru/api/v4/leads?pipeline_id=${pipelineId}&limit=250`;
    console.log(`üåê –ó–∞–ø—Ä–æ—Å –∫ AmoCRM (–≤—Å–µ —Å–¥–µ–ª–∫–∏): ${apiUrl}`);
    console.log(`üéØ –ë—É–¥–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É ID: ${statusId} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –∏–∑ AmoCRM
    const response = await fetch(apiUrl, {
      headers: {
        'Authorization': `Bearer ${AMO_ACCESS_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    console.log(`üì° –û—Ç–≤–µ—Ç AmoCRM: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå AmoCRM API error: ${response.status} - ${errorText}`);
      throw new Error(`AmoCRM API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç AmoCRM:`, JSON.stringify(data, null, 2));
    
    const allLeads = data._embedded?.leads || [];
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${allLeads.length} —Å–¥–µ–ª–æ–∫ –∏–∑ AmoCRM –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ${branch}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    const today = new Date();
    const todayString = today.toISOString().split('T')[0]; // YYYY-MM-DD
    console.log(`üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: ${todayString}`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:`);
    const statusCounts = {};
    allLeads.forEach((lead, index) => {
      const statusId = lead.status_id.toString();
      if (!statusCounts[statusId]) {
        statusCounts[statusId] = 0;
      }
      statusCounts[statusId]++;
      
      if (index < 10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–¥–µ–ª–æ–∫
        console.log(`   ${index + 1}. ${lead.name} - —Å—Ç–∞—Ç—É—Å ID: ${statusId} (–æ–∂–∏–¥–∞–µ–º: ${statusId})`);
      }
    });
    
    console.log(`üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:`, statusCounts);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –Ω—É–∂–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É
    console.log(`üîç –§–∏–ª—å—Ç—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É ${statusId}...`);
    const filteredLeads = allLeads.filter(lead => {
      const isCorrectStatus = lead.status_id.toString() === statusId;
      if (isCorrectStatus) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ –≤ –Ω—É–∂–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ: ${lead.name} (—Å—Ç–∞—Ç—É—Å: ${lead.status_id})`);
        console.log(`   - ID —Å–¥–µ–ª–∫–∏: ${lead.id}`);
        console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: ${lead.name}`);
        console.log(`   - –°—Ç–∞—Ç—É—Å: ${lead.status_id}`);
        console.log(`   - Pipeline: ${lead.pipeline_id}`);
        console.log(`   - –°–æ–∑–¥–∞–Ω–∞: ${lead.created_at}`);
        console.log(`   - –û–±–Ω–æ–≤–ª–µ–Ω–∞: ${lead.updated_at}`);
        console.log(`   - –ó–∞–∫—Ä—ã—Ç–∞: ${lead.closed_at || '–Ω–µ –∑–∞–∫—Ä—ã—Ç–∞'}`);
        console.log(`   - –ê–∫—Ç–∏–≤–Ω–∞: ${!lead.closed_at ? '–î–ê' : '–ù–ï–¢'}`);
      }
      return isCorrectStatus;
    });

    console.log(`‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filteredLeads.length} —Å–¥–µ–ª–æ–∫ –∏–∑ ${allLeads.length} –ø–æ —Å—Ç–∞—Ç—É—Å—É ${statusId}`);

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "—Å–µ–≥–æ–¥–Ω—è"
    if (statusId === '45762658') {
      console.log(`üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "—Å–µ–≥–æ–¥–Ω—è":`);
      console.log(`   - –ò—â–µ–º —Å–¥–µ–ª–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ID: 45762658`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ "—Å–µ–≥–æ–¥–Ω—è"
      const todayLeads = allLeads.filter(lead => lead.status_id.toString() === '45762658');
      console.log(`   - –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 45762658: ${todayLeads.length}`);
      
      if (todayLeads.length === 0) {
        console.log(`   ‚ö†Ô∏è –°–¥–µ–ª–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 45762658 –ù–ï –ù–ê–ô–î–ï–ù–´!`);
        console.log(`   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:`);
        const allStatuses = [...new Set(allLeads.map(lead => lead.status_id))];
        allStatuses.forEach(statusId => {
          const count = allLeads.filter(lead => lead.status_id.toString() === statusId.toString()).length;
          console.log(`     - –°—Ç–∞—Ç—É—Å ${statusId}: ${count} —Å–¥–µ–ª–æ–∫`);
        });
      } else {
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "—Å–µ–≥–æ–¥–Ω—è":`);
        todayLeads.forEach((lead, index) => {
          console.log(`     ${index + 1}. ${lead.name} (ID: ${lead.id})`);
        });
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    console.log(`üîç –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ${filteredLeads.length} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`);
    
    const deals = filteredLeads.map(lead => {
        const customFields = lead.custom_fields_values || [];
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É ${lead.id}:`, lead.name);
        console.log(`üìã –í—Å–µ –ø–æ–ª—è —Å–¥–µ–ª–∫–∏ ${lead.id}:`, customFields.map(f => `${f.field_name}: ${f.values[0]?.value}`));
        
        // –ò—â–µ–º –ø–æ–ª–µ —Å –¥–∞—Ç–æ–π –±—Ä–æ–Ω–∏
        const dateField = customFields.find(f => 
          f.field_name.toLowerCase().includes('–¥–∞—Ç–∞') || 
          f.field_name.toLowerCase().includes('–±—Ä–æ–Ω–∏') ||
          f.field_name.toLowerCase().includes('–≤—Ä–µ–º—è')
        );
        if (dateField) {
          console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Å –¥–∞—Ç–æ–π: "${dateField.field_name}" = ${dateField.values[0]?.value}`);
        }
        
        const getFieldValue = (fieldName) => {
          const field = customFields.find(f => f.field_name === fieldName);
          const value = field ? field.values[0].value : '';
          console.log(`üîç –ü–æ–ª–µ "${fieldName}" –¥–ª—è ${lead.id}:`, value);
          return value;
        };

        // –ò—â–µ–º –ø–æ–ª–µ —Å –¥–∞—Ç–æ–π –±—Ä–æ–Ω–∏ (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π)
        let datetime = getFieldValue('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏');
        if (!datetime) datetime = getFieldValue('–î–∞—Ç–∞ –±—Ä–æ–Ω–∏');
        if (!datetime) datetime = getFieldValue('–í—Ä–µ–º—è –±—Ä–æ–Ω–∏');
        if (!datetime) datetime = getFieldValue('–î–∞—Ç–∞');
        if (!datetime) datetime = getFieldValue('–í—Ä–µ–º—è');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è —Å–¥–µ–ª–∫–∏
        console.log(`üìÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è —Å–¥–µ–ª–∫–∏ ${lead.id}:`);
        console.log(`   - created_at: ${lead.created_at}`);
        console.log(`   - updated_at: ${lead.updated_at}`);
        console.log(`   - closed_at: ${lead.closed_at}`);
        console.log(`   - status_id: ${lead.status_id} (${lead.name})`);
        console.log(`   - pipeline_id: ${lead.pipeline_id}`);
        
        console.log(`üìÖ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è ${lead.id}:`, datetime, `(—Ç–∏–ø: ${typeof datetime})`);
        
        let time = '19:00';
        let bookingDate = null;
        
        if (datetime) {
          try {
            if (typeof datetime === 'number' || !isNaN(datetime)) {
              // –ï—Å–ª–∏ —ç—Ç–æ Unix timestamp
              const date = new Date(parseInt(datetime) * 1000);
              time = date.toTimeString().slice(0, 5);
              bookingDate = date.toISOString().split('T')[0]; // YYYY-MM-DD
              console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ Unix timestamp: ${datetime} -> ${bookingDate} ${time}`);
            } else if (typeof datetime === 'string') {
              if (datetime.includes(' ')) {
                // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ "DD.MM.YYYY HH:MM"
                const parts = datetime.split(' ');
                if (parts.length >= 2) {
                  time = parts[1].substring(0, 5);
                  const datePart = parts[0];
                  if (datePart.includes('.')) {
                    const [day, month, year] = datePart.split('.');
                    bookingDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                    console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã: ${datetime} -> ${bookingDate} ${time}`);
                  }
                }
              } else if (datetime.includes('.')) {
                // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                const [day, month, year] = datetime.split('.');
                bookingDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã: ${datetime} -> ${bookingDate}`);
              }
            }
          } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏:', e);
          }
        } else {
          console.log(`‚ö†Ô∏è –ü–æ–ª–µ "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏" –ø—É—Å—Ç–æ–µ –¥–ª—è —Å–¥–µ–ª–∫–∏ ${lead.id}`);
        }

        const deal = {
          id: lead.id.toString(),
          name: getFieldValue('–ò–º—è –ë—Ä–æ–Ω–∏') || lead.name || '–ë–µ–∑ –∏–º–µ–Ω–∏',
          time: time,
          guests: parseInt(getFieldValue('–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π')) || 1,
          phone: getFieldValue('–¢–µ–ª–µ—Ñ–æ–Ω') || '',
          comment: getFieldValue('–ö–æ–º–º–µ–Ω—Ç –∫ –±—Ä–æ–Ω–∏') || '',
          branch: getFieldValue('–§–∏–ª–∏–∞–ª') || branch,
          zone: getFieldValue('–ó–æ–Ω–∞') || '–ó–æ–Ω–∞ 1',
          hasVR: getFieldValue('VR') === '–î–∞',
          hasShisha: getFieldValue('–ö–∞–ª—å—è–Ω') === '–î–∞',
          leadId: lead.id,
          status: lead.status_id,
          bookingDate: bookingDate
        };

        console.log(`üìã –°–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞: ${deal.name} –Ω–∞ ${deal.bookingDate} –≤ ${deal.time} (—Å—Ç–∞—Ç—É—Å: ${deal.status})`);
        return deal;
      });

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${deals.length} —Å–¥–µ–ª–æ–∫ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ ${statusId}`);
    if (deals.length > 0) {
      console.log(`üìä –°–¥–µ–ª–∫–∏:`, deals.map(d => `${d.name} (${d.bookingDate} ${d.time}, —Å—Ç–∞—Ç—É—Å: ${d.status})`));
    } else {
      console.log(`‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ ${statusId}`);
      console.log(`üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
      console.log(`   - –°—Ç–∞—Ç—É—Å ID ${statusId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–æ—Ä–æ–Ω–∫–µ`);
      console.log(`   - –í —Å—Ç–∞—Ç—É—Å–µ ${statusId} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫`);
      console.log(`   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç—É—Å—É`);
    }

    res.status(200).json({
      success: true,
      deals: deals,
      timestamp: new Date().toISOString(),
      today: todayString,
      totalLeads: allLeads.length,
      filteredDeals: deals.length,
      platform: 'Vercel',
      note: `–î–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ${branch} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å ${statusId}`,
      debug: {
        requestedStatusId: statusId,
        pipelineId: pipelineId,
        apiUrl: apiUrl,
        totalLeadsReceived: allLeads.length,
        statusDistribution: statusCounts,
        filteringApplied: true
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –∏–∑ AmoCRM:', error.message);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const today = new Date();
    const todayString = today.toISOString().split('T')[0];
    
    const mockDeals = [
      {
        id: '1',
        name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ (–¢–µ—Å—Ç Vercel)',
        time: '19:00',
        guests: 4,
        phone: '+7 (999) 123-45-67',
        comment: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        branch: branch || '–ú–°–ö',
        zone: '–ó–æ–Ω–∞ 3',
        hasVR: true,
        hasShisha: false,
        leadId: '1',
        status: '47000707',
        bookingDate: todayString
      },
      {
        id: '2',
        name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞ (–¢–µ—Å—Ç Vercel)',
        time: '20:30',
        guests: 2,
        phone: '+7 (999) 234-56-78',
        comment: '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω',
        branch: branch || '–ü–æ–ª–µ–≤–∞—è',
        zone: '–ó–æ–Ω–∞ 1',
        hasVR: false,
        hasShisha: true,
        leadId: '2',
        status: '47000707',
        bookingDate: todayString
      }
    ].filter(deal => deal.branch === (branch || '–ú–°–ö'));

    console.log(`üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: ${mockDeals.length} —Å–¥–µ–ª–æ–∫`);

    res.status(200).json({
      success: false,
      error: error.message,
      deals: mockDeals,
      timestamp: new Date().toISOString(),
      today: todayString,
      platform: 'Vercel',
      debug: {
        tokenConfigured: !!process.env.AMO_ACCESS_TOKEN,
        tokenLength: process.env.AMO_ACCESS_TOKEN ? process.env.AMO_ACCESS_TOKEN.length : 0,
        branch: branch,
        pipelineId: branch === '–ü–æ–ª–µ–≤–∞—è' ? '5998579' : '5096620'
      }
    });
  }
};