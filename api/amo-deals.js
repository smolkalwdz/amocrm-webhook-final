// Vercel Serverless Function –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –∏–∑ AmoCRM
module.exports = async (req, res) => {
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç node-fetch
  const fetch = (await import('node-fetch')).default;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM
  const AMO_SUBDOMAIN = 'dungeonbron'; // –í–∞—à –ø–æ–¥–¥–æ–º–µ–Ω AmoCRM
  const AMO_ACCESS_TOKEN = process.env.AMO_ACCESS_TOKEN; // –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ AmoCRM

  // –í–∫–ª—é—á–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å—ã
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  // –¢–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'GET') {
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }

  try {
    const { branch } = req.query; // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª–∏–∞–ª –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

    if (!AMO_ACCESS_TOKEN) {
      console.error('‚ùå AMO_ACCESS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return res.status(500).json({ 
        error: 'AmoCRM —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        deals: [] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º pipeline_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª–∏–∞–ª–∞
    const pipelineId = branch === '–ü–æ–ª–µ–≤–∞—è' ? '5096621' : '5096620'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ ID –≤–æ—Ä–æ–Ω–æ–∫

    // –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –∏–∑ AmoCRM
    const response = await fetch(`https://${AMO_SUBDOMAIN}.amocrm.ru/api/v4/leads?pipeline_id=${pipelineId}&status[]=47000707`, {
      headers: {
        'Authorization': `Bearer ${AMO_ACCESS_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`AmoCRM API error: ${response.status}`);
    }

    const data = await response.json();
    const leads = data._embedded?.leads || [];

    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${leads.length} —Å–¥–µ–ª–æ–∫ –∏–∑ AmoCRM –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ ${branch}`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–¥–µ–ª–∫–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const deals = leads.map(lead => {
      const customFields = lead.custom_fields || [];
      
      const getFieldValue = (fieldName) => {
        const field = customFields.find(f => f.name === fieldName);
        return field ? field.values[0].value : '';
      };

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –ø–æ–ª—è "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏"
      const datetime = getFieldValue('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏');
      let time = '19:00';
      if (datetime) {
        try {
          if (typeof datetime === 'number' || !isNaN(datetime)) {
            const date = new Date(parseInt(datetime) * 1000);
            time = date.toTimeString().slice(0, 5);
          } else if (datetime.includes(' ')) {
            time = datetime.split(' ')[1].substring(0, 5);
          }
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏:', e);
        }
      }

      return {
        id: lead.id.toString(),
        name: getFieldValue('–ò–º—è –ë—Ä–æ–Ω–∏') || lead.name || '–ë–µ–∑ –∏–º–µ–Ω–∏',
        time: time,
        guests: parseInt(getFieldValue('–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π')) || 1,
        phone: getFieldValue('–¢–µ–ª–µ—Ñ–æ–Ω') || '',
        comment: getFieldValue('–ö–æ–º–º–µ–Ω—Ç –∫ –±—Ä–æ–Ω–∏') || '',
        branch: branch,
        zone: getFieldValue('–ó–æ–Ω–∞') || '–ó–æ–Ω–∞ 1',
        hasVR: getFieldValue('VR') === '–î–∞',
        hasShisha: getFieldValue('–ö–∞–ª—å—è–Ω') === '–î–∞',
        leadId: lead.id,
        status: lead.status_id
      };
    });

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${deals.length} —Å–¥–µ–ª–æ–∫`);

    res.status(200).json({
      success: true,
      deals: deals,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –∏–∑ AmoCRM:', error.message);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const mockDeals = [
      {
        id: '1',
        name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
        time: '19:00',
        guests: 4,
        phone: '+7 (999) 123-45-67',
        comment: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        branch: branch || '–ú–°–ö',
        zone: '–ó–æ–Ω–∞ 3',
        hasVR: true,
        hasShisha: false,
        leadId: '1',
        status: '47000707'
      },
      {
        id: '2',
        name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
        time: '20:30',
        guests: 2,
        phone: '+7 (999) 234-56-78',
        comment: '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω',
        branch: branch || '–ü–æ–ª–µ–≤–∞—è',
        zone: '–ó–æ–Ω–∞ 1',
        hasVR: false,
        hasShisha: true,
        leadId: '2',
        status: '47000707'
      }
    ].filter(deal => deal.branch === (branch || '–ú–°–ö'));

    res.status(200).json({
      success: false,
      error: error.message,
      deals: mockDeals,
      timestamp: new Date().toISOString()
    });
  }
}; 