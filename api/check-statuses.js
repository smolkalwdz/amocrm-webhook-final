// Vercel Serverless Function –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ AmoCRM
module.exports = async (req, res) => {
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç node-fetch
  const fetch = (await import('node-fetch')).default;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM
  const AMO_SUBDOMAIN = 'dungeonbron';
  const AMO_ACCESS_TOKEN = process.env.AMO_ACCESS_TOKEN;

  // –í–∫–ª—é—á–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'GET') {
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }

  try {
    const { branch } = req.query;
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞: ${branch}`);

    if (!AMO_ACCESS_TOKEN) {
      return res.status(500).json({ error: 'AmoCRM —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º pipeline_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª–∏–∞–ª–∞
    let pipelineId;
    if (branch === '–ü–æ–ª–µ–≤–∞—è') {
      pipelineId = '5998579'; // –ü–æ–ª–µ–≤–∞—è 72
    } else if (branch === '–ú–°–ö') {
      pipelineId = '5096620'; // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à. 43
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–æ–Ω–∫–µ –∏ –µ—ë —Å—Ç–∞—Ç—É—Å–∞—Ö
    const pipelineUrl = `https://${AMO_SUBDOMAIN}.amocrm.ru/api/v4/leads/pipelines/${pipelineId}`;
    console.log(`üåê –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ—Ä–æ–Ω–∫–µ: ${pipelineUrl}`);

    const response = await fetch(pipelineUrl, {
      headers: {
        'Authorization': `Bearer ${AMO_ACCESS_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå AmoCRM API error: ${response.status} - ${errorText}`);
      throw new Error(`AmoCRM API error: ${response.status} - ${errorText}`);
    }

    const pipelineData = await response.json();
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–æ—Ä–æ–Ω–∫–µ:`, JSON.stringify(pipelineData, null, 2));

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
    const leadsUrl = `https://${AMO_SUBDOMAIN}.amocrm.ru/api/v4/leads?pipeline_id=${pipelineId}`;
    console.log(`üåê –ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–æ–∫: ${leadsUrl}`);

    const leadsResponse = await fetch(leadsUrl, {
      headers: {
        'Authorization': `Bearer ${AMO_ACCESS_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    if (!leadsResponse.ok) {
      const errorText = await leadsResponse.text();
      throw new Error(`AmoCRM API error: ${leadsResponse.status} - ${errorText}`);
    }

    const leadsData = await leadsResponse.json();
    const leads = leadsData._embedded?.leads || [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
    const statusCounts = {};
    leads.forEach(lead => {
      const statusId = lead.status_id.toString();
      if (!statusCounts[statusId]) {
        statusCounts[statusId] = {
          count: 0,
          names: []
        };
      }
      statusCounts[statusId].count++;
      if (!statusCounts[statusId].names.includes(lead.name)) {
        statusCounts[statusId].names.push(lead.name);
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏
    const statuses = pipelineData._embedded?.statuses || [];
    const statusNames = {};
    statuses.forEach(status => {
      statusNames[status.id] = status.name;
    });

    res.status(200).json({
      success: true,
      pipeline: {
        id: pipelineData.id,
        name: pipelineData.name
      },
      statuses: statuses.map(status => ({
        id: status.id,
        name: status.name,
        color: status.color,
        sort: status.sort
      })),
      leadsAnalysis: {
        totalLeads: leads.length,
        statusCounts: Object.keys(statusCounts).map(statusId => ({
          statusId: statusId,
          statusName: statusNames[statusId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
          count: statusCounts[statusId].count,
          sampleNames: statusCounts[statusId].names.slice(0, 3)
        }))
      },
      timestamp: new Date().toISOString(),
      platform: 'Vercel'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', error.message);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString(),
      platform: 'Vercel'
    });
  }
}; 