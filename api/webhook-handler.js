// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç AmoCRM
module.exports = async (req, res) => {
  const fetch = (await import('node-fetch')).default;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM
  const AMO_SUBDOMAIN = 'dungeonbron';
  const AMO_ACCESS_TOKEN = process.env.AMO_ACCESS_TOKEN;
  const WEBHOOK_SECRET = process.env.AMO_WEBHOOK_SECRET;
  
  // –í–∫–ª—é—á–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, X-Webhook-Signature');
  
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }
  
  if (req.method !== 'POST') {
    res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω' });
    return;
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
    if (WEBHOOK_SECRET) {
      const signature = req.headers['x-webhook-signature'];
      if (!signature) {
        console.warn('‚ö†Ô∏è –í–µ–±—Ö—É–∫ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏');
      }
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏
    }
    
    const webhookData = req.body;
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç AmoCRM:', JSON.stringify(webhookData, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    const eventType = webhookData.event_type || 'unknown';
    const leadId = webhookData.leads?.add?.[0]?.id || 
                   webhookData.leads?.update?.[0]?.id || 
                   webhookData.leads?.delete?.[0]?.id;
    
    if (!leadId) {
      console.warn('‚ö†Ô∏è –í–µ–±—Ö—É–∫ –±–µ–∑ ID —Å–¥–µ–ª–∫–∏');
      return res.status(200).json({ 
        status: 'ignored', 
        message: '–í–µ–±—Ö—É–∫ –±–µ–∑ ID —Å–¥–µ–ª–∫–∏' 
      });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
    let action = 'unknown';
    if (webhookData.leads?.add) {
      action = 'add';
    } else if (webhookData.leads?.update) {
      action = 'update';
    } else if (webhookData.leads?.delete) {
      action = 'delete';
    }
    
    console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ: ${action} –¥–ª—è —Å–¥–µ–ª–∫–∏ ${leadId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    let leadData = null;
    if (action !== 'delete') {
      try {
        const leadUrl = `https://${AMO_SUBDOMAIN}.amocrm.ru/api/v4/leads/${leadId}`;
        const response = await fetch(leadUrl, {
          headers: {
            'Authorization': `Bearer ${AMO_ACCESS_TOKEN}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          const leadResponse = await response.json();
          leadData = leadResponse;
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ ${leadId}:`, leadResponse.name);
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ ${leadId}:`, response.status);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ ${leadId}:`, error.message);
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª–∏–∞–ª –ø–æ pipeline_id
    let branch = 'unknown';
    if (leadData) {
      const pipelineId = leadData.pipeline_id?.toString();
      if (pipelineId === '5096620') {
        branch = '–ú–°–ö';
      } else if (pipelineId === '5998579') {
        branch = '–ü–æ–ª–µ–≤–∞—è';
      }
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const result = {
      status: 'processed',
      timestamp: new Date().toISOString(),
      event: {
        type: eventType,
        action: action,
        leadId: leadId
      },
      lead: leadData ? {
        id: leadData.id,
        name: leadData.name,
        pipeline_id: leadData.pipeline_id,
        status_id: leadData.status_id,
        branch: branch
      } : null,
      message: `–°–æ–±—ã—Ç–∏–µ ${action} –¥–ª—è —Å–¥–µ–ª–∫–∏ ${leadId} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`
    };
    
    console.log('‚úÖ –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', result);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è:
    // - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
    // - –û—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    
    res.status(200).json(result);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', error.message);
    res.status(500).json({
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
}; 