// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AmoCRM –Ω–∞ Vercel
module.exports = async (req, res) => {
  console.log('üß™ –¢–ï–°–¢: –§—É–Ω–∫—Ü–∏—è test-amo –≤—ã–∑–≤–∞–Ω–∞ –Ω–∞ Vercel');
  
  // –í–∫–ª—é—á–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å—ã
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  try {
    const AMO_ACCESS_TOKEN = process.env.AMO_ACCESS_TOKEN;
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω AmoCRM...');
    console.log('–¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', !!AMO_ACCESS_TOKEN);
    console.log('–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:', AMO_ACCESS_TOKEN ? AMO_ACCESS_TOKEN.length : 0);
    
    if (AMO_ACCESS_TOKEN) {
      console.log('–ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–∫–µ–Ω–∞:', AMO_ACCESS_TOKEN.substring(0, 20));
    }

    res.status(200).json({
      success: true,
      message: '–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Vercel!',
      timestamp: new Date().toISOString(),
      platform: 'Vercel',
      tokenConfigured: !!AMO_ACCESS_TOKEN,
      tokenLength: AMO_ACCESS_TOKEN ? AMO_ACCESS_TOKEN.length : 0,
      tokenPreview: AMO_ACCESS_TOKEN ? AMO_ACCESS_TOKEN.substring(0, 20) + '...' : '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString(),
      platform: 'Vercel'
    });
  }
}; 