// Vercel Serverless Function
module.exports = async (req, res) => {
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç node-fetch
  const fetch = (await import('node-fetch')).default;
  
  // URL –≤–∞—à–µ–π –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏
  const KANBAN_API_URL = 'https://smolkalwdz-kanban-backend-3d00.twc1.net';

  // –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –¥–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è, –±–µ–∑ –¥–∞—Ç—ã)
  function extractTimeFromDateTime(datetime) {
    if (!datetime) return '19:00';
    
    try {
      // –ï—Å–ª–∏ —ç—Ç–æ timestamp (—á–∏—Å–ª–æ)
      if (typeof datetime === 'number' || !isNaN(datetime)) {
        const date = new Date(parseInt(datetime) * 1000);
        return date.toTimeString().slice(0, 5); // HH:MM
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "23.08.2025 18:24"
      const parts = datetime.split(' ');
      if (parts.length >= 2) {
        const timePart = parts[1];
        const timeMatch = timePart.match(/(\d{1,2}):(\d{2})/);
        if (timeMatch) {
          const hours = timeMatch[1].padStart(2, '0');
          const minutes = timeMatch[2];
          return `${hours}:${minutes}`;
        }
      }
      
      return '19:00';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏:', error);
      return '19:00';
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–æ–Ω—ã –≤ ID
  function parseZoneToTableId(zoneName, branch) {
    if (!zoneName) return 1;
    
    const zoneNumber = parseInt(zoneName.replace(/\D/g, ''));
    
    const zoneMapping = {
      '–ú–°–ö': {
        '–ó–æ–Ω–∞ 1': 1, '–ó–æ–Ω–∞ 2': 2, '–ó–æ–Ω–∞ 3': 3, '–ó–æ–Ω–∞ 4': 4, '–ó–æ–Ω–∞ 5': 5,
        '–ó–æ–Ω–∞ 6': 6, '–ó–æ–Ω–∞ 7': 7, '–ó–æ–Ω–∞ 8': 8, '–ó–æ–Ω–∞ 9': 9, '–ó–æ–Ω–∞ 10': 10,
        '–ó–æ–Ω–∞ 11': 11, '–ó–æ–Ω–∞ 12': 12, '–ó–æ–Ω–∞ 13': 13, '–ó–æ–Ω–∞ 14': 14, '–ó–æ–Ω–∞ 15': 15,
        '–ó–æ–Ω–∞ 16': 16, '–ó–æ–Ω–∞ 17': 17, '–ó–æ–Ω–∞ 18': 18, '–ó–æ–Ω–∞ 19': 19, '–ó–æ–Ω–∞ 20': 20,
        '–ó–æ–Ω–∞ 21': 21, '–ó–æ–Ω–∞ 22': 22
      },
      '–ü–æ–ª–µ–≤–∞—è': {
        '–ó–æ–Ω–∞ 1': 1, '–ó–æ–Ω–∞ 2': 2, '–ó–æ–Ω–∞ 3': 3, '–ó–æ–Ω–∞ 4': 4, '–ó–æ–Ω–∞ 5': 5,
        '–ó–æ–Ω–∞ 6': 6, '–ó–æ–Ω–∞ 7': 7, '–ó–æ–Ω–∞ 8': 8, '–ó–æ–Ω–∞ 9': 9, '–ó–æ–Ω–∞ 10': 10,
        '–ó–æ–Ω–∞ 11': 11, '–ó–æ–Ω–∞ 12': 12, '–ó–æ–Ω–∞ 13': 13, '–ó–æ–Ω–∞ 14': 14, '–ó–æ–Ω–∞ 15': 15,
        '–ó–æ–Ω–∞ 16': 16, '–ó–æ–Ω–∞ 17': 17, '–ó–æ–Ω–∞ 18': 18, '–ó–æ–Ω–∞ 19': 19, '–ó–æ–Ω–∞ 20': 20
      }
    };
    
    return zoneMapping[branch]?.[zoneName] || zoneNumber || 1;
  }

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏ –≤ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–µ
  async function createBookingInKanban(bookingData) {
    try {
      console.log('üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫—É:', JSON.stringify(bookingData, null, 2));
      console.log('üåê URL:', `${KANBAN_API_URL}/api/bookings`);
      
      const response = await fetch(`${KANBAN_API_URL}/api/bookings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(bookingData)
      });
      
      console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      
      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ –ë—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞ –≤ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–µ:', result);
      } else {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏:', response.status, errorText);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–µ:', error.message);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ –±—Ä–æ–Ω—å
  async function processLeadToBooking(lead, contacts) {
    try {
      console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É:', lead.id);
      
      const contact = contacts ? contacts.find(c => c.id === lead.contact_id) : null;
      const customFields = lead.custom_fields || [];
      
      console.log('üìã –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è:', customFields.map(f => f.name));
      
      const getFieldValue = (fieldName) => {
        const field = customFields.find(f => f.name === fieldName);
        return field ? field.values[0].value : '';
      };
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –ø–æ–ª—è "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏" (—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è)
      const datetime = getFieldValue('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏');
      const time = extractTimeFromDateTime(datetime);
      console.log('‚è∞ –í—Ä–µ–º—è –∏–∑ timestamp:', datetime, '‚Üí', time);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª–∏–∞–ª
      const branchName = getFieldValue('–§–∏–ª–∏–∞–ª');
      const branch = branchName.includes('–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ') ? '–ú–°–ö' : 
                     branchName.includes('–ü–æ–ª–µ–≤–∞—è') ? '–ü–æ–ª–µ–≤–∞—è' : '–ú–°–ö';
      console.log('üè¢ –§–∏–ª–∏–∞–ª:', branchName, '‚Üí', branch);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è
      const phone = contact ? contact.phone : getFieldValue('–¢–µ–ª–µ—Ñ–æ–Ω') || '';
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const bookingData = {
        name: getFieldValue('–ò–º—è –ë—Ä–æ–Ω–∏') || contact?.name || lead.name || '–ë–µ–∑ –∏–º–µ–Ω–∏',
        time: time, // –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è, –±–µ–∑ –¥–∞—Ç—ã
        guests: parseInt(getFieldValue('–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π')) || 1,
        phone: phone, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        source: 'AmoCRM',
        tableId: parseZoneToTableId(getFieldValue('–ó–æ–Ω–∞'), branch),
        branch: branch,
        isActive: false,
        comment: getFieldValue('–ö–æ–º–º–µ–Ω—Ç –∫ –±—Ä–æ–Ω–∏') || '',
        hasVR: getFieldValue('VR') === '–î–∞',
        hasShisha: getFieldValue('–ö–∞–ª—å—è–Ω') === '–î–∞',
        amoLeadId: lead.id
      };
      
      console.log('üìù –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω—å:', JSON.stringify(bookingData, null, 2));
      await createBookingInKanban(bookingData);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏:', error.message);
    }
  }

  // –í–∫–ª—é—á–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å—ã
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }

  try {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ AmoCRM:', JSON.stringify(req.body, null, 2));
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ AmoCRM –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    const leads = [];
    const contacts = [];
    
    // –ò—â–µ–º —Å–¥–µ–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ leads[add][0][id], leads[add][0][name], etc.
    for (let i = 0; ; i++) {
      const leadIdKey = `leads[add][${i}][id]`;
      if (!req.body[leadIdKey]) break;
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è –¥–ª—è —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏
      const lead = {
        id: req.body[`leads[add][${i}][id]`],
        name: req.body[`leads[add][${i}][name]`],
        status_id: req.body[`leads[add][${i}][status_id]`],
        price: req.body[`leads[add][${i}][price]`],
        responsible_user_id: req.body[`leads[add][${i}][responsible_user_id]`],
        last_modified: req.body[`leads[add][${i}][last_modified]`],
        modified_user_id: req.body[`leads[add][${i}][modified_user_id]`],
        created_user_id: req.body[`leads[add][${i}][created_user_id]`],
        date_create: req.body[`leads[add][${i}][date_create]`],
        pipeline_id: req.body[`leads[add][${i}][pipeline_id]`],
        account_id: req.body[`leads[add][${i}][account_id]`],
        created_at: req.body[`leads[add][${i}][created_at]`],
        updated_at: req.body[`leads[add][${i}][updated_at]`],
        custom_fields: []
      };
      
      // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
      for (let j = 0; ; j++) {
        const fieldIdKey = `leads[add][${i}][custom_fields][${j}][id]`;
        if (!req.body[fieldIdKey]) break;
        
        const customField = {
          id: req.body[`leads[add][${i}][custom_fields][${j}][id]`],
          name: req.body[`leads[add][${i}][custom_fields][${j}][name]`],
          values: [{
            value: req.body[`leads[add][${i}][custom_fields][${j}][values][0]`] || 
                   req.body[`leads[add][${i}][custom_fields][${j}][values][0][value]`] || '',
            enum: req.body[`leads[add][${i}][custom_fields][${j}][values][0][enum]`] || ''
          }]
        };
        
        lead.custom_fields.push(customField);
      }
      
      leads.push(lead);
    }
    
    console.log('üéØ –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', leads.length);
    console.log('üìã –ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞:', JSON.stringify(leads[0], null, 2));
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–¥–µ–ª–∫—É
    for (const lead of leads) {
      await processLeadToBooking(lead, contacts);
    }
    
    res.status(200).json({ 
      success: true, 
      message: 'Webhook processed!',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error.message);
    res.status(500).json({ error: 'Internal server error' });
  }
}; 